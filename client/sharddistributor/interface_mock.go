// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -package sharddistributor -source interface.go -destination interface_mock.go -self_package github.com/uber/cadence/client/sharddistributor
//

// Package sharddistributor is a generated GoMock package.
package sharddistributor

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	yarpc "go.uber.org/yarpc"

	types "github.com/uber/cadence/common/types"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetShardOwner mocks base method.
func (m *MockClient) GetShardOwner(arg0 context.Context, arg1 *types.GetShardOwnerRequest, arg2 ...yarpc.CallOption) (*types.GetShardOwnerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetShardOwner", varargs...)
	ret0, _ := ret[0].(*types.GetShardOwnerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShardOwner indicates an expected call of GetShardOwner.
func (mr *MockClientMockRecorder) GetShardOwner(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardOwner", reflect.TypeOf((*MockClient)(nil).GetShardOwner), varargs...)
}
