package metered

// Code generated by gowrap. DO NOT EDIT.
// template: ../../templates/metered.tmpl
// gowrap: http://github.com/hexdigest/gowrap

import (
	"context"

	"go.uber.org/yarpc"

	"github.com/uber/cadence/client/sharddistributor"
	"github.com/uber/cadence/common/metrics"
	"github.com/uber/cadence/common/types"
)

// sharddistributorClient implements sharddistributor.Client interface instrumented with retries
type sharddistributorClient struct {
	client        sharddistributor.Client
	metricsClient metrics.Client
}

// NewShardDistributorClient creates a new instance of sharddistributorClient with retry policy
func NewShardDistributorClient(client sharddistributor.Client, metricsClient metrics.Client) sharddistributor.Client {
	return &sharddistributorClient{
		client:        client,
		metricsClient: metricsClient,
	}
}

func (c *sharddistributorClient) GetShardOwner(ctx context.Context, gp1 *types.GetShardOwnerRequest, p1 ...yarpc.CallOption) (gp2 *types.GetShardOwnerResponse, err error) {
	c.metricsClient.IncCounter(metrics.ShardDistributorClientGetShardOwnerScope, metrics.CadenceClientRequests)

	sw := c.metricsClient.StartTimer(metrics.ShardDistributorClientGetShardOwnerScope, metrics.CadenceClientLatency)
	gp2, err = c.client.GetShardOwner(ctx, gp1, p1...)
	sw.Stop()

	if err != nil {
		c.metricsClient.IncCounter(metrics.ShardDistributorClientGetShardOwnerScope, metrics.CadenceClientFailures)
	}
	return gp2, err
}
