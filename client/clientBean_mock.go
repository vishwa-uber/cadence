// Code generated by MockGen. DO NOT EDIT.
// Source: clientBean.go
//
// Generated by this command:
//
//	mockgen -package client -source clientBean.go -destination clientBean_mock.go -self_package github.com/uber/cadence/client
//

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	admin "github.com/uber/cadence/client/admin"
	frontend "github.com/uber/cadence/client/frontend"
	history "github.com/uber/cadence/client/history"
	matching "github.com/uber/cadence/client/matching"
	sharddistributor "github.com/uber/cadence/client/sharddistributor"
)

// MockBean is a mock of Bean interface.
type MockBean struct {
	ctrl     *gomock.Controller
	recorder *MockBeanMockRecorder
	isgomock struct{}
}

// MockBeanMockRecorder is the mock recorder for MockBean.
type MockBeanMockRecorder struct {
	mock *MockBean
}

// NewMockBean creates a new mock instance.
func NewMockBean(ctrl *gomock.Controller) *MockBean {
	mock := &MockBean{ctrl: ctrl}
	mock.recorder = &MockBeanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBean) EXPECT() *MockBeanMockRecorder {
	return m.recorder
}

// GetFrontendClient mocks base method.
func (m *MockBean) GetFrontendClient() frontend.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrontendClient")
	ret0, _ := ret[0].(frontend.Client)
	return ret0
}

// GetFrontendClient indicates an expected call of GetFrontendClient.
func (mr *MockBeanMockRecorder) GetFrontendClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrontendClient", reflect.TypeOf((*MockBean)(nil).GetFrontendClient))
}

// GetHistoryClient mocks base method.
func (m *MockBean) GetHistoryClient() history.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryClient")
	ret0, _ := ret[0].(history.Client)
	return ret0
}

// GetHistoryClient indicates an expected call of GetHistoryClient.
func (mr *MockBeanMockRecorder) GetHistoryClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryClient", reflect.TypeOf((*MockBean)(nil).GetHistoryClient))
}

// GetHistoryPeers mocks base method.
func (m *MockBean) GetHistoryPeers() history.PeerResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryPeers")
	ret0, _ := ret[0].(history.PeerResolver)
	return ret0
}

// GetHistoryPeers indicates an expected call of GetHistoryPeers.
func (mr *MockBeanMockRecorder) GetHistoryPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryPeers", reflect.TypeOf((*MockBean)(nil).GetHistoryPeers))
}

// GetMatchingClient mocks base method.
func (m *MockBean) GetMatchingClient(domainIDToName DomainIDToNameFunc) (matching.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchingClient", domainIDToName)
	ret0, _ := ret[0].(matching.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchingClient indicates an expected call of GetMatchingClient.
func (mr *MockBeanMockRecorder) GetMatchingClient(domainIDToName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingClient", reflect.TypeOf((*MockBean)(nil).GetMatchingClient), domainIDToName)
}

// GetRemoteAdminClient mocks base method.
func (m *MockBean) GetRemoteAdminClient(cluster string) (admin.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteAdminClient", cluster)
	ret0, _ := ret[0].(admin.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteAdminClient indicates an expected call of GetRemoteAdminClient.
func (mr *MockBeanMockRecorder) GetRemoteAdminClient(cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteAdminClient", reflect.TypeOf((*MockBean)(nil).GetRemoteAdminClient), cluster)
}

// GetRemoteFrontendClient mocks base method.
func (m *MockBean) GetRemoteFrontendClient(cluster string) (frontend.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteFrontendClient", cluster)
	ret0, _ := ret[0].(frontend.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteFrontendClient indicates an expected call of GetRemoteFrontendClient.
func (mr *MockBeanMockRecorder) GetRemoteFrontendClient(cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteFrontendClient", reflect.TypeOf((*MockBean)(nil).GetRemoteFrontendClient), cluster)
}

// GetShardDistributorClient mocks base method.
func (m *MockBean) GetShardDistributorClient() sharddistributor.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardDistributorClient")
	ret0, _ := ret[0].(sharddistributor.Client)
	return ret0
}

// GetShardDistributorClient indicates an expected call of GetShardDistributorClient.
func (mr *MockBeanMockRecorder) GetShardDistributorClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardDistributorClient", reflect.TypeOf((*MockBean)(nil).GetShardDistributorClient))
}

// SetRemoteAdminClient mocks base method.
func (m *MockBean) SetRemoteAdminClient(cluster string, client admin.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRemoteAdminClient", cluster, client)
}

// SetRemoteAdminClient indicates an expected call of SetRemoteAdminClient.
func (mr *MockBeanMockRecorder) SetRemoteAdminClient(cluster, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemoteAdminClient", reflect.TypeOf((*MockBean)(nil).SetRemoteAdminClient), cluster, client)
}
