// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/common/clock (interfaces: Reservation)
//
// Generated by this command:
//
//	mockgen -package=clock -destination=ratelimiter_mock.go github.com/uber/cadence/common/clock Reservation
//

// Package clock is a generated GoMock package.
package clock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockReservation is a mock of Reservation interface.
type MockReservation struct {
	ctrl     *gomock.Controller
	recorder *MockReservationMockRecorder
	isgomock struct{}
}

// MockReservationMockRecorder is the mock recorder for MockReservation.
type MockReservationMockRecorder struct {
	mock *MockReservation
}

// NewMockReservation creates a new mock instance.
func NewMockReservation(ctrl *gomock.Controller) *MockReservation {
	mock := &MockReservation{ctrl: ctrl}
	mock.recorder = &MockReservationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservation) EXPECT() *MockReservationMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockReservation) Allow() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allow indicates an expected call of Allow.
func (mr *MockReservationMockRecorder) Allow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockReservation)(nil).Allow))
}

// Used mocks base method.
func (m *MockReservation) Used(wasUsed bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Used", wasUsed)
}

// Used indicates an expected call of Used.
func (mr *MockReservationMockRecorder) Used(wasUsed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Used", reflect.TypeOf((*MockReservation)(nil).Used), wasUsed)
}
