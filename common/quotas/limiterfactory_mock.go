// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/common/quotas (interfaces: LimiterFactory)
//
// Generated by this command:
//
//	mockgen -package=quotas -destination=limiterfactory_mock.go github.com/uber/cadence/common/quotas LimiterFactory
//

// Package quotas is a generated GoMock package.
package quotas

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLimiterFactory is a mock of LimiterFactory interface.
type MockLimiterFactory struct {
	ctrl     *gomock.Controller
	recorder *MockLimiterFactoryMockRecorder
	isgomock struct{}
}

// MockLimiterFactoryMockRecorder is the mock recorder for MockLimiterFactory.
type MockLimiterFactoryMockRecorder struct {
	mock *MockLimiterFactory
}

// NewMockLimiterFactory creates a new mock instance.
func NewMockLimiterFactory(ctrl *gomock.Controller) *MockLimiterFactory {
	mock := &MockLimiterFactory{ctrl: ctrl}
	mock.recorder = &MockLimiterFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimiterFactory) EXPECT() *MockLimiterFactoryMockRecorder {
	return m.recorder
}

// GetLimiter mocks base method.
func (m *MockLimiterFactory) GetLimiter(domain string) Limiter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimiter", domain)
	ret0, _ := ret[0].(Limiter)
	return ret0
}

// GetLimiter indicates an expected call of GetLimiter.
func (mr *MockLimiterFactoryMockRecorder) GetLimiter(domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimiter", reflect.TypeOf((*MockLimiterFactory)(nil).GetLimiter), domain)
}
