// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/common/quotas (interfaces: ICollection)
//
// Generated by this command:
//
//	mockgen -package=quotas -destination=collection_mock.go github.com/uber/cadence/common/quotas ICollection
//

// Package quotas is a generated GoMock package.
package quotas

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockICollection is a mock of ICollection interface.
type MockICollection struct {
	ctrl     *gomock.Controller
	recorder *MockICollectionMockRecorder
	isgomock struct{}
}

// MockICollectionMockRecorder is the mock recorder for MockICollection.
type MockICollectionMockRecorder struct {
	mock *MockICollection
}

// NewMockICollection creates a new mock instance.
func NewMockICollection(ctrl *gomock.Controller) *MockICollection {
	mock := &MockICollection{ctrl: ctrl}
	mock.recorder = &MockICollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICollection) EXPECT() *MockICollectionMockRecorder {
	return m.recorder
}

// For mocks base method.
func (m *MockICollection) For(key string) Limiter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "For", key)
	ret0, _ := ret[0].(Limiter)
	return ret0
}

// For indicates an expected call of For.
func (mr *MockICollectionMockRecorder) For(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "For", reflect.TypeOf((*MockICollection)(nil).For), key)
}
