// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -package isolationgroupapi -source interface.go -destination isolation_handler_mock.go -self_package github.com/uber/cadence/common/isolationgroup/isolationgrouphandler
//

// Package isolationgroupapi is a generated GoMock package.
package isolationgroupapi

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	types "github.com/uber/cadence/common/types"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
	isgomock struct{}
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// GetDomainState mocks base method.
func (m *MockHandler) GetDomainState(ctx context.Context, request types.GetDomainIsolationGroupsRequest) (*types.GetDomainIsolationGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainState", ctx, request)
	ret0, _ := ret[0].(*types.GetDomainIsolationGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainState indicates an expected call of GetDomainState.
func (mr *MockHandlerMockRecorder) GetDomainState(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainState", reflect.TypeOf((*MockHandler)(nil).GetDomainState), ctx, request)
}

// GetGlobalState mocks base method.
func (m *MockHandler) GetGlobalState(ctx context.Context) (*types.GetGlobalIsolationGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalState", ctx)
	ret0, _ := ret[0].(*types.GetGlobalIsolationGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalState indicates an expected call of GetGlobalState.
func (mr *MockHandlerMockRecorder) GetGlobalState(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalState", reflect.TypeOf((*MockHandler)(nil).GetGlobalState), ctx)
}

// UpdateDomainState mocks base method.
func (m *MockHandler) UpdateDomainState(ctx context.Context, state types.UpdateDomainIsolationGroupsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainState", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDomainState indicates an expected call of UpdateDomainState.
func (mr *MockHandlerMockRecorder) UpdateDomainState(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainState", reflect.TypeOf((*MockHandler)(nil).UpdateDomainState), ctx, state)
}

// UpdateGlobalState mocks base method.
func (m *MockHandler) UpdateGlobalState(ctx context.Context, state types.UpdateGlobalIsolationGroupsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalState", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGlobalState indicates an expected call of UpdateGlobalState.
func (mr *MockHandlerMockRecorder) UpdateGlobalState(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalState", reflect.TypeOf((*MockHandler)(nil).UpdateGlobalState), ctx, state)
}
