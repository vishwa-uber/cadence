// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -package invariant -source types.go -destination mocks.go -self_package github.com/uber/cadence/common/reconciliation/invariant
//

// Package invariant is a generated GoMock package.
package invariant

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInvariant is a mock of Invariant interface.
type MockInvariant struct {
	ctrl     *gomock.Controller
	recorder *MockInvariantMockRecorder
	isgomock struct{}
}

// MockInvariantMockRecorder is the mock recorder for MockInvariant.
type MockInvariantMockRecorder struct {
	mock *MockInvariant
}

// NewMockInvariant creates a new mock instance.
func NewMockInvariant(ctrl *gomock.Controller) *MockInvariant {
	mock := &MockInvariant{ctrl: ctrl}
	mock.recorder = &MockInvariantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvariant) EXPECT() *MockInvariantMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockInvariant) Check(arg0 context.Context, arg1 any) CheckResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1)
	ret0, _ := ret[0].(CheckResult)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockInvariantMockRecorder) Check(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockInvariant)(nil).Check), arg0, arg1)
}

// Fix mocks base method.
func (m *MockInvariant) Fix(arg0 context.Context, arg1 any) FixResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fix", arg0, arg1)
	ret0, _ := ret[0].(FixResult)
	return ret0
}

// Fix indicates an expected call of Fix.
func (mr *MockInvariantMockRecorder) Fix(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fix", reflect.TypeOf((*MockInvariant)(nil).Fix), arg0, arg1)
}

// Name mocks base method.
func (m *MockInvariant) Name() Name {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(Name)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockInvariantMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockInvariant)(nil).Name))
}

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// RunChecks mocks base method.
func (m *MockManager) RunChecks(arg0 context.Context, arg1 any) ManagerCheckResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunChecks", arg0, arg1)
	ret0, _ := ret[0].(ManagerCheckResult)
	return ret0
}

// RunChecks indicates an expected call of RunChecks.
func (mr *MockManagerMockRecorder) RunChecks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunChecks", reflect.TypeOf((*MockManager)(nil).RunChecks), arg0, arg1)
}

// RunFixes mocks base method.
func (m *MockManager) RunFixes(arg0 context.Context, arg1 any) ManagerFixResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunFixes", arg0, arg1)
	ret0, _ := ret[0].(ManagerFixResult)
	return ret0
}

// RunFixes indicates an expected call of RunFixes.
func (mr *MockManagerMockRecorder) RunFixes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunFixes", reflect.TypeOf((*MockManager)(nil).RunFixes), arg0, arg1)
}
