// Code generated by MockGen. DO NOT EDIT.
// Source: historyIterator.go
//
// Generated by this command:
//
//	mockgen -package archiver -source historyIterator.go -destination historyIterator_mock.go -self_package github.com/uber/cadence/common/archiver
//

// Package archiver is a generated GoMock package.
package archiver

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHistoryIterator is a mock of HistoryIterator interface.
type MockHistoryIterator struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryIteratorMockRecorder
	isgomock struct{}
}

// MockHistoryIteratorMockRecorder is the mock recorder for MockHistoryIterator.
type MockHistoryIteratorMockRecorder struct {
	mock *MockHistoryIterator
}

// NewMockHistoryIterator creates a new mock instance.
func NewMockHistoryIterator(ctrl *gomock.Controller) *MockHistoryIterator {
	mock := &MockHistoryIterator{ctrl: ctrl}
	mock.recorder = &MockHistoryIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryIterator) EXPECT() *MockHistoryIteratorMockRecorder {
	return m.recorder
}

// GetState mocks base method.
func (m *MockHistoryIterator) GetState() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockHistoryIteratorMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockHistoryIterator)(nil).GetState))
}

// HasNext mocks base method.
func (m *MockHistoryIterator) HasNext() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNext")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNext indicates an expected call of HasNext.
func (mr *MockHistoryIteratorMockRecorder) HasNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNext", reflect.TypeOf((*MockHistoryIterator)(nil).HasNext))
}

// Next mocks base method.
func (m *MockHistoryIterator) Next() (*HistoryBlob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*HistoryBlob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockHistoryIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockHistoryIterator)(nil).Next))
}

// MockSizeEstimator is a mock of SizeEstimator interface.
type MockSizeEstimator struct {
	ctrl     *gomock.Controller
	recorder *MockSizeEstimatorMockRecorder
	isgomock struct{}
}

// MockSizeEstimatorMockRecorder is the mock recorder for MockSizeEstimator.
type MockSizeEstimatorMockRecorder struct {
	mock *MockSizeEstimator
}

// NewMockSizeEstimator creates a new mock instance.
func NewMockSizeEstimator(ctrl *gomock.Controller) *MockSizeEstimator {
	mock := &MockSizeEstimator{ctrl: ctrl}
	mock.recorder = &MockSizeEstimatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSizeEstimator) EXPECT() *MockSizeEstimatorMockRecorder {
	return m.recorder
}

// EstimateSize mocks base method.
func (m *MockSizeEstimator) EstimateSize(v any) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateSize", v)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateSize indicates an expected call of EstimateSize.
func (mr *MockSizeEstimatorMockRecorder) EstimateSize(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateSize", reflect.TypeOf((*MockSizeEstimator)(nil).EstimateSize), v)
}
