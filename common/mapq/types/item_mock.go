// Code generated by MockGen. DO NOT EDIT.
// Source: item.go
//
// Generated by this command:
//
//	mockgen -package types -source item.go -destination item_mock.go -package types github.com/uber/cadence/common/mapq/types Item
//

// Package types is a generated GoMock package.
package types

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockItem is a mock of Item interface.
type MockItem struct {
	ctrl     *gomock.Controller
	recorder *MockItemMockRecorder
	isgomock struct{}
}

// MockItemMockRecorder is the mock recorder for MockItem.
type MockItemMockRecorder struct {
	mock *MockItem
}

// NewMockItem creates a new mock instance.
func NewMockItem(ctrl *gomock.Controller) *MockItem {
	mock := &MockItem{ctrl: ctrl}
	mock.recorder = &MockItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItem) EXPECT() *MockItemMockRecorder {
	return m.recorder
}

// GetAttribute mocks base method.
func (m *MockItem) GetAttribute(key string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttribute", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetAttribute indicates an expected call of GetAttribute.
func (mr *MockItemMockRecorder) GetAttribute(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttribute", reflect.TypeOf((*MockItem)(nil).GetAttribute), key)
}

// Offset mocks base method.
func (m *MockItem) Offset() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockItemMockRecorder) Offset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockItem)(nil).Offset))
}

// String mocks base method.
func (m *MockItem) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockItemMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockItem)(nil).String))
}

// MockItemToPersist is a mock of ItemToPersist interface.
type MockItemToPersist struct {
	ctrl     *gomock.Controller
	recorder *MockItemToPersistMockRecorder
	isgomock struct{}
}

// MockItemToPersistMockRecorder is the mock recorder for MockItemToPersist.
type MockItemToPersistMockRecorder struct {
	mock *MockItemToPersist
}

// NewMockItemToPersist creates a new mock instance.
func NewMockItemToPersist(ctrl *gomock.Controller) *MockItemToPersist {
	mock := &MockItemToPersist{ctrl: ctrl}
	mock.recorder = &MockItemToPersistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemToPersist) EXPECT() *MockItemToPersistMockRecorder {
	return m.recorder
}

// GetAttribute mocks base method.
func (m *MockItemToPersist) GetAttribute(key string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttribute", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetAttribute indicates an expected call of GetAttribute.
func (mr *MockItemToPersistMockRecorder) GetAttribute(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttribute", reflect.TypeOf((*MockItemToPersist)(nil).GetAttribute), key)
}

// GetPartitionKeys mocks base method.
func (m *MockItemToPersist) GetPartitionKeys() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionKeys")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPartitionKeys indicates an expected call of GetPartitionKeys.
func (mr *MockItemToPersistMockRecorder) GetPartitionKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionKeys", reflect.TypeOf((*MockItemToPersist)(nil).GetPartitionKeys))
}

// GetPartitionValue mocks base method.
func (m *MockItemToPersist) GetPartitionValue(key string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionValue", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetPartitionValue indicates an expected call of GetPartitionValue.
func (mr *MockItemToPersistMockRecorder) GetPartitionValue(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionValue", reflect.TypeOf((*MockItemToPersist)(nil).GetPartitionValue), key)
}

// Offset mocks base method.
func (m *MockItemToPersist) Offset() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockItemToPersistMockRecorder) Offset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockItemToPersist)(nil).Offset))
}

// String mocks base method.
func (m *MockItemToPersist) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockItemToPersistMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockItemToPersist)(nil).String))
}

// MockItemPartitions is a mock of ItemPartitions interface.
type MockItemPartitions struct {
	ctrl     *gomock.Controller
	recorder *MockItemPartitionsMockRecorder
	isgomock struct{}
}

// MockItemPartitionsMockRecorder is the mock recorder for MockItemPartitions.
type MockItemPartitionsMockRecorder struct {
	mock *MockItemPartitions
}

// NewMockItemPartitions creates a new mock instance.
func NewMockItemPartitions(ctrl *gomock.Controller) *MockItemPartitions {
	mock := &MockItemPartitions{ctrl: ctrl}
	mock.recorder = &MockItemPartitionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemPartitions) EXPECT() *MockItemPartitionsMockRecorder {
	return m.recorder
}

// GetPartitionKeys mocks base method.
func (m *MockItemPartitions) GetPartitionKeys() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionKeys")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPartitionKeys indicates an expected call of GetPartitionKeys.
func (mr *MockItemPartitionsMockRecorder) GetPartitionKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionKeys", reflect.TypeOf((*MockItemPartitions)(nil).GetPartitionKeys))
}

// GetPartitionValue mocks base method.
func (m *MockItemPartitions) GetPartitionValue(key string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionValue", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetPartitionValue indicates an expected call of GetPartitionValue.
func (mr *MockItemPartitionsMockRecorder) GetPartitionValue(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionValue", reflect.TypeOf((*MockItemPartitions)(nil).GetPartitionValue), key)
}

// String mocks base method.
func (m *MockItemPartitions) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockItemPartitionsMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockItemPartitions)(nil).String))
}
