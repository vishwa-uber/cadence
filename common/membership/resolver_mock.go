// Code generated by MockGen. DO NOT EDIT.
// Source: resolver.go
//
// Generated by this command:
//
//	mockgen -package membership -source resolver.go -destination resolver_mock.go -self_package github.com/uber/cadence/common/membership
//

// Package membership is a generated GoMock package.
package membership

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockResolver is a mock of Resolver interface.
type MockResolver struct {
	ctrl     *gomock.Controller
	recorder *MockResolverMockRecorder
	isgomock struct{}
}

// MockResolverMockRecorder is the mock recorder for MockResolver.
type MockResolverMockRecorder struct {
	mock *MockResolver
}

// NewMockResolver creates a new mock instance.
func NewMockResolver(ctrl *gomock.Controller) *MockResolver {
	mock := &MockResolver{ctrl: ctrl}
	mock.recorder = &MockResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolver) EXPECT() *MockResolverMockRecorder {
	return m.recorder
}

// EvictSelf mocks base method.
func (m *MockResolver) EvictSelf() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvictSelf")
	ret0, _ := ret[0].(error)
	return ret0
}

// EvictSelf indicates an expected call of EvictSelf.
func (mr *MockResolverMockRecorder) EvictSelf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictSelf", reflect.TypeOf((*MockResolver)(nil).EvictSelf))
}

// Lookup mocks base method.
func (m *MockResolver) Lookup(service, key string) (HostInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", service, key)
	ret0, _ := ret[0].(HostInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockResolverMockRecorder) Lookup(service, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockResolver)(nil).Lookup), service, key)
}

// LookupByAddress mocks base method.
func (m *MockResolver) LookupByAddress(service, address string) (HostInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupByAddress", service, address)
	ret0, _ := ret[0].(HostInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupByAddress indicates an expected call of LookupByAddress.
func (mr *MockResolverMockRecorder) LookupByAddress(service, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupByAddress", reflect.TypeOf((*MockResolver)(nil).LookupByAddress), service, address)
}

// MemberCount mocks base method.
func (m *MockResolver) MemberCount(service string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberCount", service)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberCount indicates an expected call of MemberCount.
func (mr *MockResolverMockRecorder) MemberCount(service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberCount", reflect.TypeOf((*MockResolver)(nil).MemberCount), service)
}

// Members mocks base method.
func (m *MockResolver) Members(service string) ([]HostInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Members", service)
	ret0, _ := ret[0].([]HostInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Members indicates an expected call of Members.
func (mr *MockResolverMockRecorder) Members(service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Members", reflect.TypeOf((*MockResolver)(nil).Members), service)
}

// Start mocks base method.
func (m *MockResolver) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockResolverMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockResolver)(nil).Start))
}

// Stop mocks base method.
func (m *MockResolver) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockResolverMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockResolver)(nil).Stop))
}

// Subscribe mocks base method.
func (m *MockResolver) Subscribe(service, name string, notifyChannel chan<- *ChangedEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", service, name, notifyChannel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockResolverMockRecorder) Subscribe(service, name, notifyChannel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockResolver)(nil).Subscribe), service, name, notifyChannel)
}

// Unsubscribe mocks base method.
func (m *MockResolver) Unsubscribe(service, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", service, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockResolverMockRecorder) Unsubscribe(service, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockResolver)(nil).Unsubscribe), service, name)
}

// WhoAmI mocks base method.
func (m *MockResolver) WhoAmI() (HostInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhoAmI")
	ret0, _ := ret[0].(HostInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WhoAmI indicates an expected call of WhoAmI.
func (mr *MockResolverMockRecorder) WhoAmI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhoAmI", reflect.TypeOf((*MockResolver)(nil).WhoAmI))
}
