// Code generated by MockGen. DO NOT EDIT.
// Source: singleprovider.go
//
// Generated by this command:
//
//	mockgen -package membership -source singleprovider.go -destination=singleprovider_mock.go SingleProvider
//

// Package membership is a generated GoMock package.
package membership

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSingleProvider is a mock of SingleProvider interface.
type MockSingleProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSingleProviderMockRecorder
	isgomock struct{}
}

// MockSingleProviderMockRecorder is the mock recorder for MockSingleProvider.
type MockSingleProviderMockRecorder struct {
	mock *MockSingleProvider
}

// NewMockSingleProvider creates a new mock instance.
func NewMockSingleProvider(ctrl *gomock.Controller) *MockSingleProvider {
	mock := &MockSingleProvider{ctrl: ctrl}
	mock.recorder = &MockSingleProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSingleProvider) EXPECT() *MockSingleProviderMockRecorder {
	return m.recorder
}

// AddressToHost mocks base method.
func (m *MockSingleProvider) AddressToHost(owner string) (HostInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressToHost", owner)
	ret0, _ := ret[0].(HostInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddressToHost indicates an expected call of AddressToHost.
func (mr *MockSingleProviderMockRecorder) AddressToHost(owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressToHost", reflect.TypeOf((*MockSingleProvider)(nil).AddressToHost), owner)
}

// Lookup mocks base method.
func (m *MockSingleProvider) Lookup(key string) (HostInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", key)
	ret0, _ := ret[0].(HostInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockSingleProviderMockRecorder) Lookup(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockSingleProvider)(nil).Lookup), key)
}

// LookupRaw mocks base method.
func (m *MockSingleProvider) LookupRaw(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupRaw", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupRaw indicates an expected call of LookupRaw.
func (mr *MockSingleProviderMockRecorder) LookupRaw(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupRaw", reflect.TypeOf((*MockSingleProvider)(nil).LookupRaw), key)
}

// MemberCount mocks base method.
func (m *MockSingleProvider) MemberCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// MemberCount indicates an expected call of MemberCount.
func (mr *MockSingleProviderMockRecorder) MemberCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberCount", reflect.TypeOf((*MockSingleProvider)(nil).MemberCount))
}

// Members mocks base method.
func (m *MockSingleProvider) Members() []HostInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Members")
	ret0, _ := ret[0].([]HostInfo)
	return ret0
}

// Members indicates an expected call of Members.
func (mr *MockSingleProviderMockRecorder) Members() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Members", reflect.TypeOf((*MockSingleProvider)(nil).Members))
}

// Refresh mocks base method.
func (m *MockSingleProvider) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockSingleProviderMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockSingleProvider)(nil).Refresh))
}

// Start mocks base method.
func (m *MockSingleProvider) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockSingleProviderMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSingleProvider)(nil).Start))
}

// Stop mocks base method.
func (m *MockSingleProvider) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockSingleProviderMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSingleProvider)(nil).Stop))
}

// Subscribe mocks base method.
func (m *MockSingleProvider) Subscribe(name string, channel chan<- *ChangedEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", name, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSingleProviderMockRecorder) Subscribe(name, channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSingleProvider)(nil).Subscribe), name, channel)
}

// Unsubscribe mocks base method.
func (m *MockSingleProvider) Unsubscribe(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSingleProviderMockRecorder) Unsubscribe(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSingleProvider)(nil).Unsubscribe), name)
}
