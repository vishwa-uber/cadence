// Code generated by MockGen. DO NOT EDIT.
// Source: dlq_message_handler.go
//
// Generated by this command:
//
//	mockgen -package domain -source dlq_message_handler.go -destination dlq_message_handler_mock.go
//

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	types "github.com/uber/cadence/common/types"
)

// MockDLQMessageHandler is a mock of DLQMessageHandler interface.
type MockDLQMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDLQMessageHandlerMockRecorder
	isgomock struct{}
}

// MockDLQMessageHandlerMockRecorder is the mock recorder for MockDLQMessageHandler.
type MockDLQMessageHandlerMockRecorder struct {
	mock *MockDLQMessageHandler
}

// NewMockDLQMessageHandler creates a new mock instance.
func NewMockDLQMessageHandler(ctrl *gomock.Controller) *MockDLQMessageHandler {
	mock := &MockDLQMessageHandler{ctrl: ctrl}
	mock.recorder = &MockDLQMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDLQMessageHandler) EXPECT() *MockDLQMessageHandlerMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockDLQMessageHandler) Count(ctx context.Context, forceFetch bool) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, forceFetch)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockDLQMessageHandlerMockRecorder) Count(ctx, forceFetch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDLQMessageHandler)(nil).Count), ctx, forceFetch)
}

// Merge mocks base method.
func (m *MockDLQMessageHandler) Merge(ctx context.Context, lastMessageID int64, pageSize int, pageToken []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", ctx, lastMessageID, pageSize, pageToken)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Merge indicates an expected call of Merge.
func (mr *MockDLQMessageHandlerMockRecorder) Merge(ctx, lastMessageID, pageSize, pageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockDLQMessageHandler)(nil).Merge), ctx, lastMessageID, pageSize, pageToken)
}

// Purge mocks base method.
func (m *MockDLQMessageHandler) Purge(ctx context.Context, lastMessageID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Purge", ctx, lastMessageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Purge indicates an expected call of Purge.
func (mr *MockDLQMessageHandlerMockRecorder) Purge(ctx, lastMessageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockDLQMessageHandler)(nil).Purge), ctx, lastMessageID)
}

// Read mocks base method.
func (m *MockDLQMessageHandler) Read(ctx context.Context, lastMessageID int64, pageSize int, pageToken []byte) ([]*types.ReplicationTask, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, lastMessageID, pageSize, pageToken)
	ret0, _ := ret[0].([]*types.ReplicationTask)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read.
func (mr *MockDLQMessageHandlerMockRecorder) Read(ctx, lastMessageID, pageSize, pageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDLQMessageHandler)(nil).Read), ctx, lastMessageID, pageSize, pageToken)
}

// Start mocks base method.
func (m *MockDLQMessageHandler) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockDLQMessageHandlerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDLQMessageHandler)(nil).Start))
}

// Stop mocks base method.
func (m *MockDLQMessageHandler) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockDLQMessageHandlerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDLQMessageHandler)(nil).Stop))
}
