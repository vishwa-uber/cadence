// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -package queueconfigapi -source interface.go -destination handler_mock.go -self_package github.com/uber/cadence/common/asyncworkflow/queueconfigapi
//

// Package queueconfigapi is a generated GoMock package.
package queueconfigapi

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	types "github.com/uber/cadence/common/types"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
	isgomock struct{}
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// GetConfiguraton mocks base method.
func (m *MockHandler) GetConfiguraton(arg0 context.Context, arg1 *types.GetDomainAsyncWorkflowConfiguratonRequest) (*types.GetDomainAsyncWorkflowConfiguratonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguraton", arg0, arg1)
	ret0, _ := ret[0].(*types.GetDomainAsyncWorkflowConfiguratonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguraton indicates an expected call of GetConfiguraton.
func (mr *MockHandlerMockRecorder) GetConfiguraton(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguraton", reflect.TypeOf((*MockHandler)(nil).GetConfiguraton), arg0, arg1)
}

// UpdateConfiguration mocks base method.
func (m *MockHandler) UpdateConfiguration(arg0 context.Context, arg1 *types.UpdateDomainAsyncWorkflowConfiguratonRequest) (*types.UpdateDomainAsyncWorkflowConfiguratonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*types.UpdateDomainAsyncWorkflowConfiguratonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfiguration indicates an expected call of UpdateConfiguration.
func (mr *MockHandlerMockRecorder) UpdateConfiguration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguration", reflect.TypeOf((*MockHandler)(nil).UpdateConfiguration), arg0, arg1)
}
