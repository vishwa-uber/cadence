// Code generated by MockGen. DO NOT EDIT.
// Source: taskTokenSerializerInterfaces.go
//
// Generated by this command:
//
//	mockgen -package common -source taskTokenSerializerInterfaces.go -destination taskTokenSerializerInterfaces_mock.go -self_package github.com/uber/cadence/common
//

// Package common is a generated GoMock package.
package common

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTaskTokenSerializer is a mock of TaskTokenSerializer interface.
type MockTaskTokenSerializer struct {
	ctrl     *gomock.Controller
	recorder *MockTaskTokenSerializerMockRecorder
	isgomock struct{}
}

// MockTaskTokenSerializerMockRecorder is the mock recorder for MockTaskTokenSerializer.
type MockTaskTokenSerializerMockRecorder struct {
	mock *MockTaskTokenSerializer
}

// NewMockTaskTokenSerializer creates a new mock instance.
func NewMockTaskTokenSerializer(ctrl *gomock.Controller) *MockTaskTokenSerializer {
	mock := &MockTaskTokenSerializer{ctrl: ctrl}
	mock.recorder = &MockTaskTokenSerializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskTokenSerializer) EXPECT() *MockTaskTokenSerializerMockRecorder {
	return m.recorder
}

// Deserialize mocks base method.
func (m *MockTaskTokenSerializer) Deserialize(data []byte) (*TaskToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deserialize", data)
	ret0, _ := ret[0].(*TaskToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deserialize indicates an expected call of Deserialize.
func (mr *MockTaskTokenSerializerMockRecorder) Deserialize(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deserialize", reflect.TypeOf((*MockTaskTokenSerializer)(nil).Deserialize), data)
}

// DeserializeQueryTaskToken mocks base method.
func (m *MockTaskTokenSerializer) DeserializeQueryTaskToken(data []byte) (*QueryTaskToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeserializeQueryTaskToken", data)
	ret0, _ := ret[0].(*QueryTaskToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeserializeQueryTaskToken indicates an expected call of DeserializeQueryTaskToken.
func (mr *MockTaskTokenSerializerMockRecorder) DeserializeQueryTaskToken(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeserializeQueryTaskToken", reflect.TypeOf((*MockTaskTokenSerializer)(nil).DeserializeQueryTaskToken), data)
}

// Serialize mocks base method.
func (m *MockTaskTokenSerializer) Serialize(token *TaskToken) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize", token)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Serialize indicates an expected call of Serialize.
func (mr *MockTaskTokenSerializerMockRecorder) Serialize(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockTaskTokenSerializer)(nil).Serialize), token)
}

// SerializeQueryTaskToken mocks base method.
func (m *MockTaskTokenSerializer) SerializeQueryTaskToken(token *QueryTaskToken) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SerializeQueryTaskToken", token)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SerializeQueryTaskToken indicates an expected call of SerializeQueryTaskToken.
func (mr *MockTaskTokenSerializerMockRecorder) SerializeQueryTaskToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SerializeQueryTaskToken", reflect.TypeOf((*MockTaskTokenSerializer)(nil).SerializeQueryTaskToken), token)
}
