// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/common/codec (interfaces: BinaryEncoder)
//
// Generated by this command:
//
//	mockgen -package codec -destination interfaces_mock.go -self_package github.com/uber/cadence/common/codec github.com/uber/cadence/common/codec BinaryEncoder
//

// Package codec is a generated GoMock package.
package codec

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBinaryEncoder is a mock of BinaryEncoder interface.
type MockBinaryEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockBinaryEncoderMockRecorder
	isgomock struct{}
}

// MockBinaryEncoderMockRecorder is the mock recorder for MockBinaryEncoder.
type MockBinaryEncoderMockRecorder struct {
	mock *MockBinaryEncoder
}

// NewMockBinaryEncoder creates a new mock instance.
func NewMockBinaryEncoder(ctrl *gomock.Controller) *MockBinaryEncoder {
	mock := &MockBinaryEncoder{ctrl: ctrl}
	mock.recorder = &MockBinaryEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBinaryEncoder) EXPECT() *MockBinaryEncoderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockBinaryEncoder) Decode(payload []byte, val ThriftObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", payload, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockBinaryEncoderMockRecorder) Decode(payload, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockBinaryEncoder)(nil).Decode), payload, val)
}

// Encode mocks base method.
func (m *MockBinaryEncoder) Encode(obj ThriftObject) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", obj)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockBinaryEncoderMockRecorder) Encode(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockBinaryEncoder)(nil).Encode), obj)
}
