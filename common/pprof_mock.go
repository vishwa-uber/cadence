// Code generated by MockGen. DO NOT EDIT.
// Source: pprof.go
//
// Generated by this command:
//
//	mockgen -package common -source pprof.go -destination pprof_mock.go -package common github.com/uber/cadence/common PProfInitializer
//

// Package common is a generated GoMock package.
package common

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPProfInitializer is a mock of PProfInitializer interface.
type MockPProfInitializer struct {
	ctrl     *gomock.Controller
	recorder *MockPProfInitializerMockRecorder
	isgomock struct{}
}

// MockPProfInitializerMockRecorder is the mock recorder for MockPProfInitializer.
type MockPProfInitializerMockRecorder struct {
	mock *MockPProfInitializer
}

// NewMockPProfInitializer creates a new mock instance.
func NewMockPProfInitializer(ctrl *gomock.Controller) *MockPProfInitializer {
	mock := &MockPProfInitializer{ctrl: ctrl}
	mock.recorder = &MockPProfInitializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPProfInitializer) EXPECT() *MockPProfInitializerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockPProfInitializer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockPProfInitializerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPProfInitializer)(nil).Start))
}
