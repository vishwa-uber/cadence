// Code generated by MockGen. DO NOT EDIT.
// Source: indexer.go
//
// Generated by this command:
//
//	mockgen -package indexer -source indexer.go -destination indexer_mock.go github.com/uber/cadence/service/worker/indexer ESProcessor
//

// Package indexer is a generated GoMock package.
package indexer

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	bulk "github.com/uber/cadence/common/elasticsearch/bulk"
	messaging "github.com/uber/cadence/common/messaging"
)

// MockESProcessor is a mock of ESProcessor interface.
type MockESProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockESProcessorMockRecorder
	isgomock struct{}
}

// MockESProcessorMockRecorder is the mock recorder for MockESProcessor.
type MockESProcessorMockRecorder struct {
	mock *MockESProcessor
}

// NewMockESProcessor creates a new mock instance.
func NewMockESProcessor(ctrl *gomock.Controller) *MockESProcessor {
	mock := &MockESProcessor{ctrl: ctrl}
	mock.recorder = &MockESProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockESProcessor) EXPECT() *MockESProcessorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockESProcessor) Add(request *bulk.GenericBulkableAddRequest, key string, kafkaMsg messaging.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", request, key, kafkaMsg)
}

// Add indicates an expected call of Add.
func (mr *MockESProcessorMockRecorder) Add(request, key, kafkaMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockESProcessor)(nil).Add), request, key, kafkaMsg)
}

// Start mocks base method.
func (m *MockESProcessor) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockESProcessorMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockESProcessor)(nil).Start))
}

// Stop mocks base method.
func (m *MockESProcessor) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockESProcessorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockESProcessor)(nil).Stop))
}
