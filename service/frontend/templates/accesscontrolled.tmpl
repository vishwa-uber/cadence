import (
	"context"

	"github.com/uber/cadence/common/authorization"
	"github.com/uber/cadence/common/config"
	"github.com/uber/cadence/common/log/tag"
	{{- if eq .Interface.Name "Handler"}}
	"github.com/uber/cadence/common/metrics"
	{{end}}
	"github.com/uber/cadence/common/resource"
	"github.com/uber/cadence/common/types"
)

{{$permissionMap := dict "CountWorkflowExecutions" "PermissionRead"}}
{{$permissionMap = set $permissionMap "DeleteDomain" "PermissionAdmin"}}
{{$permissionMap = set $permissionMap "DeprecateDomain" "PermissionAdmin"}}
{{$permissionMap = set $permissionMap "DescribeDomain" "PermissionRead"}}
{{$permissionMap = set $permissionMap "DescribeTaskList" "PermissionRead"}}
{{$permissionMap = set $permissionMap "DescribeWorkflowExecution" "PermissionRead"}}
{{$permissionMap = set $permissionMap "GetWorkflowExecutionHistory" "PermissionRead"}}
{{$permissionMap = set $permissionMap "ListArchivedWorkflowExecutions" "PermissionRead"}}
{{$permissionMap = set $permissionMap "ListClosedWorkflowExecutions" "PermissionRead"}}
{{$permissionMap = set $permissionMap "ListDomains" "PermissionAdmin"}}
{{$permissionMap = set $permissionMap "ListOpenWorkflowExecutions" "PermissionRead"}}
{{$permissionMap = set $permissionMap "ListWorkflowExecutions" "PermissionRead"}}
{{$permissionMap = set $permissionMap "PollForActivityTask" "PermissionWrite"}}
{{$permissionMap = set $permissionMap "PollForDecisionTask" "PermissionWrite"}}
{{$permissionMap = set $permissionMap "QueryWorkflow" "PermissionRead"}}
{{$permissionMap = set $permissionMap "RegisterDomain" "PermissionAdmin"}}
{{$permissionMap = set $permissionMap "RequestCancelWorkflowExecution" "PermissionWrite"}}
{{$permissionMap = set $permissionMap "ResetStickyTaskList" "PermissionWrite"}}
{{$permissionMap = set $permissionMap "ResetWorkflowExecution" "PermissionWrite"}}
{{$permissionMap = set $permissionMap "RestartWorkflowExecution" "PermissionWrite"}}
{{$permissionMap = set $permissionMap "ScanWorkflowExecutions" "PermissionRead"}}
{{$permissionMap = set $permissionMap "SignalWithStartWorkflowExecution" "PermissionWrite"}}
{{$permissionMap = set $permissionMap "SignalWithStartWorkflowExecutionAsync" "PermissionWrite"}}
{{$permissionMap = set $permissionMap "SignalWorkflowExecution" "PermissionWrite"}}
{{$permissionMap = set $permissionMap "StartWorkflowExecution" "PermissionWrite"}}
{{$permissionMap = set $permissionMap "StartWorkflowExecutionAsync" "PermissionWrite"}}
{{$permissionMap = set $permissionMap "TerminateWorkflowExecution" "PermissionWrite"}}
{{$permissionMap = set $permissionMap "ListTaskListPartitions" "PermissionRead"}}
{{$permissionMap = set $permissionMap "GetTaskListsByDomain" "PermissionRead"}}
{{$permissionMap = set $permissionMap "RefreshWorkflowTasks" "PermissionWrite"}}
{{$permissionMap = set $permissionMap "UpdateDomain" "PermissionAdmin"}}

{{$adminPermissionMap := dict }}
{{$adminPermissionMap = set $adminPermissionMap "DescribeCluster" "PermissionRead"}}

{{$nonDomainAuthAPIs := list "RegisterDomain" "DescribeDomain" "UpdateDomain" "DeprecateDomain" "DeleteDomain" "ListDomains" "GetSearchAttributes" "GetClusterInfo" "RecordActivityTaskHeartbeat" "RespondActivityTaskCanceled" "RespondActivityTaskCompleted" "RespondActivityTaskFailed" "RespondDecisionTaskCompleted" "RespondDecisionTaskFailed" "RespondQueryTaskCompleted"}}
{{$taskListAuthAPIs := list "PollForActivityTask" "PollForDecisionTask"}}
{{$workflowTypeAuthAPIs := list "SignalWithStartWorkflowExecution" "StartWorkflowExecution"}}

{{$interfaceName := .Interface.Name}}
{{$interfaceType := .Interface.Type}}
{{$handlerName := (index .Vars "handler")}}
{{ $decorator := (printf "%s%s" (down $handlerName) $interfaceName) }}
{{ $Decorator := (printf "%s%s" $handlerName $interfaceName) }}

// {{$decorator}} frontend handler wrapper for authentication and authorization
type {{$decorator}} struct {
	handler {{.Interface.Type}}
	authorizer authorization.Authorizer
	resource.Resource
}

// New{{$Decorator}} creates frontend handler with authentication support
func New{{$Decorator}}(handler {{$.Interface.Type}}, resource resource.Resource, authorizer authorization.Authorizer, cfg config.Authorization) {{.Interface.Type}} {
	if authorizer == nil {
		var err error
		authorizer, err = authorization.NewAuthorizer(cfg, resource.GetLogger(), resource.GetDomainCache())
		if err != nil {
			resource.GetLogger().Fatal("Error when initiating the Authorizer", tag.Error(err))
		}
	}
	return &{{$decorator}}{
		handler: handler,
		authorizer: authorizer,
		Resource: resource,
	}
}

{{range $method := .Interface.Methods}}
func (a *{{$decorator}}) {{$method.Declaration}} {
{{- if or (eq $method.Name "Start") (eq $method.Name "Stop")}}
	a.handler.{{$method.Call}}
}
{{- else}}
	{{- if or (eq $interfaceType "admin.Handler") (hasKey $permissionMap $method.Name) }}
	{{- if and (eq $interfaceType "api.Handler") (ge (len $method.Params) 2)}}
	{{- if has $method.Name $nonDomainAuthAPIs}}
	scope := a.GetMetricsClient().Scope(metrics.Frontend{{$method.Name}}Scope)
	{{- else}}
	scope := a.getMetricsScopeWithDomain(metrics.Frontend{{$method.Name}}Scope, {{(index $method.Params 1).Name}}.GetDomain())
	{{- end}}
	{{- end}}
	attr := &authorization.Attributes{
		APIName: "{{$method.Name}}",
		{{- if eq $interfaceType "admin.Handler"}}
		{{- if hasKey $adminPermissionMap $method.Name}}
		Permission: authorization.{{get $adminPermissionMap $method.Name}},
		{{- else}}
		Permission:  authorization.PermissionAdmin,
		{{- end}}
		{{- else if hasKey $permissionMap $method.Name}}
		Permission: authorization.{{get $permissionMap $method.Name}},
		{{- end}}
		{{- if ge (len $method.Params) 2}}
		RequestBody: authorization.NewFilteredRequestBody( {{(index $method.Params 1).Name}} ),
		{{- if not (or (has $method.Name $nonDomainAuthAPIs) (eq $interfaceType "admin.Handler"))}}
		DomainName: {{(index $method.Params 1).Name}}.GetDomain(),
		{{- else if eq $method.Name "DescribeDomain"}}
		DomainName: {{(index $method.Params 1).Name}}.GetName(),
		{{- end}}
		{{- if has $method.Name $taskListAuthAPIs}}
		TaskList: {{(index $method.Params 1).Name}}.TaskList,
		{{- end}}
		{{- if has $method.Name $workflowTypeAuthAPIs}}
		WorkflowType: {{(index $method.Params 1).Name}}.WorkflowType,
		{{- end}}
		{{- end}}
	}
	{{- if eq $interfaceType "admin.Handler"}}
	isAuthorized, err := a.isAuthorized(ctx, attr)
	{{- else}}
	isAuthorized, err := a.isAuthorized(ctx, attr, scope)
	{{- end}}
	if err != nil {
		{{- if eq (len $method.Results) 1}}
		return err
		{{- else}}
		return nil, err
		{{- end}}
	}
	if !isAuthorized {
		{{- if eq (len $method.Results) 1}}
		return errUnauthorized
		{{- else}}
		return nil, errUnauthorized
		{{- end}}
	}
	{{- end}}
	return a.handler.{{$method.Call}}
}
{{- end}}
{{end}}
