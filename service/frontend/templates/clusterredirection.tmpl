import (
	"context"

	"go.uber.org/yarpc"

	"github.com/uber/cadence/common"
	"github.com/uber/cadence/common/config"
	"github.com/uber/cadence/common/metrics"
	"github.com/uber/cadence/common/resource"
	"github.com/uber/cadence/common/types"
	"github.com/uber/cadence/service/frontend/api"
	frontendcfg "github.com/uber/cadence/service/frontend/config"
)

{{$nonForwardingAPIs := list "Health" "DeprecateDomain" "DeleteDomain" "DescribeDomain" "ListDomains" "RegisterDomain" "UpdateDomain" "GetSearchAttributes" "GetClusterInfo" "DiagnoseWorkflowExecution"}}
{{$domainIDAPIs := list "RecordActivityTaskHeartbeat" "RespondActivityTaskCanceled" "RespondActivityTaskCompleted" "RespondActivityTaskFailed" "RespondDecisionTaskCompleted" "RespondDecisionTaskFailed" "RespondQueryTaskCompleted"}}
{{$queryTaskTokenAPIs := list "RespondQueryTaskCompleted"}}
{{$readAPIsWithStrongConsistency := list "QueryWorkflow" "DescribeWorkflowExecution" "GetWorkflowExecutionHistory"}}

type (
	// ClusterRedirectionHandlerImpl is simple wrapper over frontend service, doing redirection based on policy for global domains not being active in current cluster
	clusterRedirectionHandler struct {
		resource.Resource

		currentClusterName string
		redirectionPolicy  ClusterRedirectionPolicy
		tokenSerializer    common.TaskTokenSerializer
		frontendHandler    api.Handler
		callOptions        []yarpc.CallOption
	}
)

// NewAPIHandler creates a frontend handler to handle cluster redirection for global domains not being active in current cluster
func NewAPIHandler(
	wfHandler api.Handler,
	resource resource.Resource,
	config *frontendcfg.Config,
	policy config.ClusterRedirectionPolicy,
) api.Handler {
	dcRedirectionPolicy := RedirectionPolicyGenerator(
		resource.GetClusterMetadata(),
		config,
		resource.GetDomainCache(),
		policy,
		resource.GetLogger(),
	)

	return &clusterRedirectionHandler{
		Resource:           resource,
		currentClusterName: resource.GetClusterMetadata().GetCurrentClusterName(),
		redirectionPolicy:  dcRedirectionPolicy,
		tokenSerializer:    common.NewJSONTaskTokenSerializer(),
		frontendHandler:    wfHandler,
		callOptions:        []yarpc.CallOption{yarpc.WithHeader(common.AutoforwardingClusterHeaderName, resource.GetClusterMetadata().GetCurrentClusterName())},
	}
}

{{range $method := .Interface.Methods}}
func (handler *clusterRedirectionHandler) {{$method.Declaration}} {
	{{- if has $method.Name $nonForwardingAPIs}}
	return handler.frontendHandler.{{$method.Call}}
	{{- else}}
	var (
		apiName = "{{$method.Name}}"
		cluster string
		requestedConsistencyLevel types.QueryConsistencyLevel = types.QueryConsistencyLevelEventual
	)

	{{- if has $method.Name $readAPIsWithStrongConsistency}}
	// Only autoforward strong consistent queries, this is done for two reasons:
	// 1. Query is meant to be fast, autoforwarding all queries will increase latency.
	// 2. If eventual consistency was requested then the results from running out of local dc will be fine.
	if {{(index $method.Params 1).Name}}.GetQueryConsistencyLevel() == types.QueryConsistencyLevelStrong {
		requestedConsistencyLevel = types.QueryConsistencyLevelStrong
	}
	{{- end}}

    {{$policyMethod := "WithDomainNameRedirect"}}
    {{$domain := printf "%s.GetDomain()" (index $method.Params 1).Name}}
    {{- if has $method.Name $domainIDAPIs}}
    token := domainIDGetter(noopdomainIDGetter{})
    {{- end}}
	scope, startTime := handler.beforeCall(metrics.DCRedirection{{$method.Name}}Scope)
	defer func() {
		{{- if has $method.Name $domainIDAPIs}}
		handler.afterCall(recover(), scope, startTime, "", token.GetDomainID(), cluster, &err)
		{{- else}}
		handler.afterCall(recover(), scope, startTime, {{$domain}}, "", cluster, &err)
        {{- end}}
	}()

	{{if has $method.Name $domainIDAPIs}}
	{{$policyMethod = "WithDomainIDRedirect"}}
	{{$domain = "token.GetDomainID()"}}
	{{if has $method.Name $queryTaskTokenAPIs}}
	token, err = handler.tokenSerializer.DeserializeQueryTaskToken({{(index $method.Params 1).Name}}.TaskToken)
	{{- else}}
	token, err = handler.tokenSerializer.Deserialize({{(index $method.Params 1).Name}}.TaskToken)
	{{- end}}
	if err != nil {
		{{- if eq (len $method.Results) 1}}
		return err
		{{- else}}
		return nil, err
		{{- end}}
	}
	{{- end}}

	err = handler.redirectionPolicy.{{$policyMethod}}(ctx, {{$domain}}, apiName, requestedConsistencyLevel, func(targetDC string) error {
		cluster = targetDC
		switch {
		case targetDC == handler.currentClusterName:
			{{$method.ResultsNames}} = handler.frontendHandler.{{$method.Call}}
		default:
			remoteClient, err := handler.GetRemoteFrontendClient(targetDC)
			if err != nil {
				return err
			}
			{{$method.ResultsNames}} = remoteClient.{{$method.Name}}({{$method.Params.Pass}}, handler.callOptions...)
		}
		return err
	})

	return {{$method.ResultsNames}}
	{{- end}}
}
{{end}}
