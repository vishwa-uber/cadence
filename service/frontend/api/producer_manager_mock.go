// Code generated by MockGen. DO NOT EDIT.
// Source: producer_manager.go
//
// Generated by this command:
//
//	mockgen -package api -source producer_manager.go -destination producer_manager_mock.go -self_package github.com/uber/cadence/service/frontend/api
//

// Package api is a generated GoMock package.
package api

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	messaging "github.com/uber/cadence/common/messaging"
)

// MockProducerManager is a mock of ProducerManager interface.
type MockProducerManager struct {
	ctrl     *gomock.Controller
	recorder *MockProducerManagerMockRecorder
	isgomock struct{}
}

// MockProducerManagerMockRecorder is the mock recorder for MockProducerManager.
type MockProducerManagerMockRecorder struct {
	mock *MockProducerManager
}

// NewMockProducerManager creates a new mock instance.
func NewMockProducerManager(ctrl *gomock.Controller) *MockProducerManager {
	mock := &MockProducerManager{ctrl: ctrl}
	mock.recorder = &MockProducerManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerManager) EXPECT() *MockProducerManagerMockRecorder {
	return m.recorder
}

// GetProducerByDomain mocks base method.
func (m *MockProducerManager) GetProducerByDomain(domain string) (messaging.Producer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducerByDomain", domain)
	ret0, _ := ret[0].(messaging.Producer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducerByDomain indicates an expected call of GetProducerByDomain.
func (mr *MockProducerManagerMockRecorder) GetProducerByDomain(domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducerByDomain", reflect.TypeOf((*MockProducerManager)(nil).GetProducerByDomain), domain)
}
