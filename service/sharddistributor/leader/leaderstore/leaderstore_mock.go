// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -package leaderstore -source store.go -destination=leaderstore_mock.go Store,Election
//

// Package leaderstore is a generated GoMock package.
package leaderstore

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateElection mocks base method.
func (m *MockStore) CreateElection(ctx context.Context, namespace string) (Election, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateElection", ctx, namespace)
	ret0, _ := ret[0].(Election)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateElection indicates an expected call of CreateElection.
func (mr *MockStoreMockRecorder) CreateElection(ctx, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateElection", reflect.TypeOf((*MockStore)(nil).CreateElection), ctx, namespace)
}

// MockElection is a mock of Election interface.
type MockElection struct {
	ctrl     *gomock.Controller
	recorder *MockElectionMockRecorder
	isgomock struct{}
}

// MockElectionMockRecorder is the mock recorder for MockElection.
type MockElectionMockRecorder struct {
	mock *MockElection
}

// NewMockElection creates a new mock instance.
func NewMockElection(ctrl *gomock.Controller) *MockElection {
	mock := &MockElection{ctrl: ctrl}
	mock.recorder = &MockElectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElection) EXPECT() *MockElectionMockRecorder {
	return m.recorder
}

// Campaign mocks base method.
func (m *MockElection) Campaign(ctx context.Context, hostname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Campaign", ctx, hostname)
	ret0, _ := ret[0].(error)
	return ret0
}

// Campaign indicates an expected call of Campaign.
func (mr *MockElectionMockRecorder) Campaign(ctx, hostname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Campaign", reflect.TypeOf((*MockElection)(nil).Campaign), ctx, hostname)
}

// Cleanup mocks base method.
func (m *MockElection) Cleanup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockElectionMockRecorder) Cleanup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockElection)(nil).Cleanup), ctx)
}

// Done mocks base method.
func (m *MockElection) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockElectionMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockElection)(nil).Done))
}

// Resign mocks base method.
func (m *MockElection) Resign(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resign", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resign indicates an expected call of Resign.
func (mr *MockElectionMockRecorder) Resign(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resign", reflect.TypeOf((*MockElection)(nil).Resign), ctx)
}
