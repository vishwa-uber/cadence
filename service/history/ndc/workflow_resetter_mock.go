// Code generated by MockGen. DO NOT EDIT.
// Source: workflow_resetter.go
//
// Generated by this command:
//
//	mockgen -package ndc -source workflow_resetter.go -destination workflow_resetter_mock.go
//

// Package ndc is a generated GoMock package.
package ndc

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"

	execution "github.com/uber/cadence/service/history/execution"
)

// MockWorkflowResetter is a mock of WorkflowResetter interface.
type MockWorkflowResetter struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowResetterMockRecorder
	isgomock struct{}
}

// MockWorkflowResetterMockRecorder is the mock recorder for MockWorkflowResetter.
type MockWorkflowResetterMockRecorder struct {
	mock *MockWorkflowResetter
}

// NewMockWorkflowResetter creates a new mock instance.
func NewMockWorkflowResetter(ctrl *gomock.Controller) *MockWorkflowResetter {
	mock := &MockWorkflowResetter{ctrl: ctrl}
	mock.recorder = &MockWorkflowResetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowResetter) EXPECT() *MockWorkflowResetterMockRecorder {
	return m.recorder
}

// ResetWorkflow mocks base method.
func (m *MockWorkflowResetter) ResetWorkflow(ctx context.Context, now time.Time, baseLastEventID, baseLastEventVersion, incomingFirstEventID, incomingFirstEventVersion int64) (execution.MutableState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetWorkflow", ctx, now, baseLastEventID, baseLastEventVersion, incomingFirstEventID, incomingFirstEventVersion)
	ret0, _ := ret[0].(execution.MutableState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetWorkflow indicates an expected call of ResetWorkflow.
func (mr *MockWorkflowResetterMockRecorder) ResetWorkflow(ctx, now, baseLastEventID, baseLastEventVersion, incomingFirstEventID, incomingFirstEventVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetWorkflow", reflect.TypeOf((*MockWorkflowResetter)(nil).ResetWorkflow), ctx, now, baseLastEventID, baseLastEventVersion, incomingFirstEventID, incomingFirstEventVersion)
}
