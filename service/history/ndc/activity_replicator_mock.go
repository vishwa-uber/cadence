// Code generated by MockGen. DO NOT EDIT.
// Source: activity_replicator.go
//
// Generated by this command:
//
//	mockgen -package ndc -source activity_replicator.go -destination activity_replicator_mock.go
//

// Package ndc is a generated GoMock package.
package ndc

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	types "github.com/uber/cadence/common/types"
)

// MockActivityReplicator is a mock of ActivityReplicator interface.
type MockActivityReplicator struct {
	ctrl     *gomock.Controller
	recorder *MockActivityReplicatorMockRecorder
	isgomock struct{}
}

// MockActivityReplicatorMockRecorder is the mock recorder for MockActivityReplicator.
type MockActivityReplicatorMockRecorder struct {
	mock *MockActivityReplicator
}

// NewMockActivityReplicator creates a new mock instance.
func NewMockActivityReplicator(ctrl *gomock.Controller) *MockActivityReplicator {
	mock := &MockActivityReplicator{ctrl: ctrl}
	mock.recorder = &MockActivityReplicatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityReplicator) EXPECT() *MockActivityReplicatorMockRecorder {
	return m.recorder
}

// SyncActivity mocks base method.
func (m *MockActivityReplicator) SyncActivity(ctx context.Context, request *types.SyncActivityRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncActivity", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncActivity indicates an expected call of SyncActivity.
func (mr *MockActivityReplicatorMockRecorder) SyncActivity(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncActivity", reflect.TypeOf((*MockActivityReplicator)(nil).SyncActivity), ctx, request)
}
