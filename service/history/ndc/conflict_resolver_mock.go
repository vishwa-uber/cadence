// Code generated by MockGen. DO NOT EDIT.
// Source: conflict_resolver.go
//
// Generated by this command:
//
//	mockgen -package ndc -source conflict_resolver.go -destination conflict_resolver_mock.go
//

// Package ndc is a generated GoMock package.
package ndc

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	execution "github.com/uber/cadence/service/history/execution"
)

// MockconflictResolver is a mock of conflictResolver interface.
type MockconflictResolver struct {
	ctrl     *gomock.Controller
	recorder *MockconflictResolverMockRecorder
	isgomock struct{}
}

// MockconflictResolverMockRecorder is the mock recorder for MockconflictResolver.
type MockconflictResolverMockRecorder struct {
	mock *MockconflictResolver
}

// NewMockconflictResolver creates a new mock instance.
func NewMockconflictResolver(ctrl *gomock.Controller) *MockconflictResolver {
	mock := &MockconflictResolver{ctrl: ctrl}
	mock.recorder = &MockconflictResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconflictResolver) EXPECT() *MockconflictResolverMockRecorder {
	return m.recorder
}

// prepareMutableState mocks base method.
func (m *MockconflictResolver) prepareMutableState(ctx context.Context, branchIndex int, incomingVersion int64) (execution.MutableState, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "prepareMutableState", ctx, branchIndex, incomingVersion)
	ret0, _ := ret[0].(execution.MutableState)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// prepareMutableState indicates an expected call of prepareMutableState.
func (mr *MockconflictResolverMockRecorder) prepareMutableState(ctx, branchIndex, incomingVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "prepareMutableState", reflect.TypeOf((*MockconflictResolver)(nil).prepareMutableState), ctx, branchIndex, incomingVersion)
}
