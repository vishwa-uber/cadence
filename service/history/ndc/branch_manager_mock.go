// Code generated by MockGen. DO NOT EDIT.
// Source: branch_manager.go
//
// Generated by this command:
//
//	mockgen -package ndc -source branch_manager.go -destination branch_manager_mock.go
//

// Package ndc is a generated GoMock package.
package ndc

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	persistence "github.com/uber/cadence/common/persistence"
)

// MockbranchManager is a mock of branchManager interface.
type MockbranchManager struct {
	ctrl     *gomock.Controller
	recorder *MockbranchManagerMockRecorder
	isgomock struct{}
}

// MockbranchManagerMockRecorder is the mock recorder for MockbranchManager.
type MockbranchManagerMockRecorder struct {
	mock *MockbranchManager
}

// NewMockbranchManager creates a new mock instance.
func NewMockbranchManager(ctrl *gomock.Controller) *MockbranchManager {
	mock := &MockbranchManager{ctrl: ctrl}
	mock.recorder = &MockbranchManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbranchManager) EXPECT() *MockbranchManagerMockRecorder {
	return m.recorder
}

// prepareVersionHistory mocks base method.
func (m *MockbranchManager) prepareVersionHistory(ctx context.Context, incomingVersionHistory *persistence.VersionHistory, incomingFirstEventID, incomingFirstEventVersion int64) (bool, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "prepareVersionHistory", ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// prepareVersionHistory indicates an expected call of prepareVersionHistory.
func (mr *MockbranchManagerMockRecorder) prepareVersionHistory(ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "prepareVersionHistory", reflect.TypeOf((*MockbranchManager)(nil).prepareVersionHistory), ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion)
}
