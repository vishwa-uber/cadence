// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go
//
// Generated by this command:
//
//	mockgen -package query -source registry.go -destination registry_mock.go -self_package github.com/uber/cadence/service/history/query
//

// Package query is a generated GoMock package.
package query

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	types "github.com/uber/cadence/common/types"
)

// MockRegistry is a mock of Registry interface.
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
	isgomock struct{}
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry.
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance.
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// BufferQuery mocks base method.
func (m *MockRegistry) BufferQuery(queryInput *types.WorkflowQuery) (string, <-chan struct{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BufferQuery", queryInput)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(<-chan struct{})
	return ret0, ret1
}

// BufferQuery indicates an expected call of BufferQuery.
func (mr *MockRegistryMockRecorder) BufferQuery(queryInput any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BufferQuery", reflect.TypeOf((*MockRegistry)(nil).BufferQuery), queryInput)
}

// GetBufferedIDs mocks base method.
func (m *MockRegistry) GetBufferedIDs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBufferedIDs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetBufferedIDs indicates an expected call of GetBufferedIDs.
func (mr *MockRegistryMockRecorder) GetBufferedIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBufferedIDs", reflect.TypeOf((*MockRegistry)(nil).GetBufferedIDs))
}

// GetCompletedIDs mocks base method.
func (m *MockRegistry) GetCompletedIDs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompletedIDs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetCompletedIDs indicates an expected call of GetCompletedIDs.
func (mr *MockRegistryMockRecorder) GetCompletedIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompletedIDs", reflect.TypeOf((*MockRegistry)(nil).GetCompletedIDs))
}

// GetFailedIDs mocks base method.
func (m *MockRegistry) GetFailedIDs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailedIDs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetFailedIDs indicates an expected call of GetFailedIDs.
func (mr *MockRegistryMockRecorder) GetFailedIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailedIDs", reflect.TypeOf((*MockRegistry)(nil).GetFailedIDs))
}

// GetQueryInput mocks base method.
func (m *MockRegistry) GetQueryInput(arg0 string) (*types.WorkflowQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryInput", arg0)
	ret0, _ := ret[0].(*types.WorkflowQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryInput indicates an expected call of GetQueryInput.
func (mr *MockRegistryMockRecorder) GetQueryInput(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryInput", reflect.TypeOf((*MockRegistry)(nil).GetQueryInput), arg0)
}

// GetQueryTermCh mocks base method.
func (m *MockRegistry) GetQueryTermCh(arg0 string) (<-chan struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryTermCh", arg0)
	ret0, _ := ret[0].(<-chan struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryTermCh indicates an expected call of GetQueryTermCh.
func (mr *MockRegistryMockRecorder) GetQueryTermCh(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryTermCh", reflect.TypeOf((*MockRegistry)(nil).GetQueryTermCh), arg0)
}

// GetTerminationState mocks base method.
func (m *MockRegistry) GetTerminationState(arg0 string) (*TerminationState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTerminationState", arg0)
	ret0, _ := ret[0].(*TerminationState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTerminationState indicates an expected call of GetTerminationState.
func (mr *MockRegistryMockRecorder) GetTerminationState(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTerminationState", reflect.TypeOf((*MockRegistry)(nil).GetTerminationState), arg0)
}

// GetUnblockedIDs mocks base method.
func (m *MockRegistry) GetUnblockedIDs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnblockedIDs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetUnblockedIDs indicates an expected call of GetUnblockedIDs.
func (mr *MockRegistryMockRecorder) GetUnblockedIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnblockedIDs", reflect.TypeOf((*MockRegistry)(nil).GetUnblockedIDs))
}

// HasBufferedQuery mocks base method.
func (m *MockRegistry) HasBufferedQuery() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBufferedQuery")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasBufferedQuery indicates an expected call of HasBufferedQuery.
func (mr *MockRegistryMockRecorder) HasBufferedQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBufferedQuery", reflect.TypeOf((*MockRegistry)(nil).HasBufferedQuery))
}

// HasCompletedQuery mocks base method.
func (m *MockRegistry) HasCompletedQuery() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCompletedQuery")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasCompletedQuery indicates an expected call of HasCompletedQuery.
func (mr *MockRegistryMockRecorder) HasCompletedQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCompletedQuery", reflect.TypeOf((*MockRegistry)(nil).HasCompletedQuery))
}

// HasFailedQuery mocks base method.
func (m *MockRegistry) HasFailedQuery() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasFailedQuery")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasFailedQuery indicates an expected call of HasFailedQuery.
func (mr *MockRegistryMockRecorder) HasFailedQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasFailedQuery", reflect.TypeOf((*MockRegistry)(nil).HasFailedQuery))
}

// HasUnblockedQuery mocks base method.
func (m *MockRegistry) HasUnblockedQuery() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUnblockedQuery")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasUnblockedQuery indicates an expected call of HasUnblockedQuery.
func (mr *MockRegistryMockRecorder) HasUnblockedQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUnblockedQuery", reflect.TypeOf((*MockRegistry)(nil).HasUnblockedQuery))
}

// RemoveQuery mocks base method.
func (m *MockRegistry) RemoveQuery(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveQuery", id)
}

// RemoveQuery indicates an expected call of RemoveQuery.
func (mr *MockRegistryMockRecorder) RemoveQuery(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveQuery", reflect.TypeOf((*MockRegistry)(nil).RemoveQuery), id)
}

// SetTerminationState mocks base method.
func (m *MockRegistry) SetTerminationState(arg0 string, arg1 *TerminationState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTerminationState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTerminationState indicates an expected call of SetTerminationState.
func (mr *MockRegistryMockRecorder) SetTerminationState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTerminationState", reflect.TypeOf((*MockRegistry)(nil).SetTerminationState), arg0, arg1)
}
