// Code generated by MockGen. DO NOT EDIT.
// Source: factory.go
//
// Generated by this command:
//
//	mockgen -package queue -source factory.go -destination factory_mock.go -self_package github.com/uber/cadence/service/history/queue
//

// Package queue is a generated GoMock package.
package queue

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	persistence "github.com/uber/cadence/common/persistence"
	invariant "github.com/uber/cadence/common/reconciliation/invariant"
	execution "github.com/uber/cadence/service/history/execution"
	shard "github.com/uber/cadence/service/history/shard"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
	isgomock struct{}
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// Category mocks base method.
func (m *MockFactory) Category() persistence.HistoryTaskCategory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Category")
	ret0, _ := ret[0].(persistence.HistoryTaskCategory)
	return ret0
}

// Category indicates an expected call of Category.
func (mr *MockFactoryMockRecorder) Category() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Category", reflect.TypeOf((*MockFactory)(nil).Category))
}

// CreateQueue mocks base method.
func (m *MockFactory) CreateQueue(arg0 shard.Context, arg1 execution.Cache, arg2 invariant.Invariant) Processor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueue", arg0, arg1, arg2)
	ret0, _ := ret[0].(Processor)
	return ret0
}

// CreateQueue indicates an expected call of CreateQueue.
func (mr *MockFactoryMockRecorder) CreateQueue(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueue", reflect.TypeOf((*MockFactory)(nil).CreateQueue), arg0, arg1, arg2)
}
