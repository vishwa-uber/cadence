// Code generated by MockGen. DO NOT EDIT.
// Source: mutable_state_task_generator.go
//
// Generated by this command:
//
//	mockgen -package execution -source mutable_state_task_generator.go -destination mutable_state_task_generator_mock.go -self_package github.com/uber/cadence/service/history/execution
//

// Package execution is a generated GoMock package.
package execution

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"

	types "github.com/uber/cadence/common/types"
)

// MockMutableStateTaskGenerator is a mock of MutableStateTaskGenerator interface.
type MockMutableStateTaskGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockMutableStateTaskGeneratorMockRecorder
	isgomock struct{}
}

// MockMutableStateTaskGeneratorMockRecorder is the mock recorder for MockMutableStateTaskGenerator.
type MockMutableStateTaskGeneratorMockRecorder struct {
	mock *MockMutableStateTaskGenerator
}

// NewMockMutableStateTaskGenerator creates a new mock instance.
func NewMockMutableStateTaskGenerator(ctrl *gomock.Controller) *MockMutableStateTaskGenerator {
	mock := &MockMutableStateTaskGenerator{ctrl: ctrl}
	mock.recorder = &MockMutableStateTaskGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutableStateTaskGenerator) EXPECT() *MockMutableStateTaskGeneratorMockRecorder {
	return m.recorder
}

// GenerateActivityRetryTasks mocks base method.
func (m *MockMutableStateTaskGenerator) GenerateActivityRetryTasks(activityScheduleID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateActivityRetryTasks", activityScheduleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateActivityRetryTasks indicates an expected call of GenerateActivityRetryTasks.
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateActivityRetryTasks(activityScheduleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateActivityRetryTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateActivityRetryTasks), activityScheduleID)
}

// GenerateActivityTimerTasks mocks base method.
func (m *MockMutableStateTaskGenerator) GenerateActivityTimerTasks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateActivityTimerTasks")
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateActivityTimerTasks indicates an expected call of GenerateActivityTimerTasks.
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateActivityTimerTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateActivityTimerTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateActivityTimerTasks))
}

// GenerateActivityTransferTasks mocks base method.
func (m *MockMutableStateTaskGenerator) GenerateActivityTransferTasks(event *types.HistoryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateActivityTransferTasks", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateActivityTransferTasks indicates an expected call of GenerateActivityTransferTasks.
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateActivityTransferTasks(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateActivityTransferTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateActivityTransferTasks), event)
}

// GenerateChildWorkflowTasks mocks base method.
func (m *MockMutableStateTaskGenerator) GenerateChildWorkflowTasks(event *types.HistoryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChildWorkflowTasks", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateChildWorkflowTasks indicates an expected call of GenerateChildWorkflowTasks.
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateChildWorkflowTasks(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChildWorkflowTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateChildWorkflowTasks), event)
}

// GenerateDecisionScheduleTasks mocks base method.
func (m *MockMutableStateTaskGenerator) GenerateDecisionScheduleTasks(decisionScheduleID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDecisionScheduleTasks", decisionScheduleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateDecisionScheduleTasks indicates an expected call of GenerateDecisionScheduleTasks.
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateDecisionScheduleTasks(decisionScheduleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDecisionScheduleTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateDecisionScheduleTasks), decisionScheduleID)
}

// GenerateDecisionStartTasks mocks base method.
func (m *MockMutableStateTaskGenerator) GenerateDecisionStartTasks(decisionScheduleID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDecisionStartTasks", decisionScheduleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateDecisionStartTasks indicates an expected call of GenerateDecisionStartTasks.
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateDecisionStartTasks(decisionScheduleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDecisionStartTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateDecisionStartTasks), decisionScheduleID)
}

// GenerateDelayedDecisionTasks mocks base method.
func (m *MockMutableStateTaskGenerator) GenerateDelayedDecisionTasks(startEvent *types.HistoryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDelayedDecisionTasks", startEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateDelayedDecisionTasks indicates an expected call of GenerateDelayedDecisionTasks.
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateDelayedDecisionTasks(startEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDelayedDecisionTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateDelayedDecisionTasks), startEvent)
}

// GenerateRecordWorkflowStartedTasks mocks base method.
func (m *MockMutableStateTaskGenerator) GenerateRecordWorkflowStartedTasks(startEvent *types.HistoryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRecordWorkflowStartedTasks", startEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateRecordWorkflowStartedTasks indicates an expected call of GenerateRecordWorkflowStartedTasks.
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateRecordWorkflowStartedTasks(startEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRecordWorkflowStartedTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateRecordWorkflowStartedTasks), startEvent)
}

// GenerateRequestCancelExternalTasks mocks base method.
func (m *MockMutableStateTaskGenerator) GenerateRequestCancelExternalTasks(event *types.HistoryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRequestCancelExternalTasks", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateRequestCancelExternalTasks indicates an expected call of GenerateRequestCancelExternalTasks.
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateRequestCancelExternalTasks(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRequestCancelExternalTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateRequestCancelExternalTasks), event)
}

// GenerateSignalExternalTasks mocks base method.
func (m *MockMutableStateTaskGenerator) GenerateSignalExternalTasks(event *types.HistoryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSignalExternalTasks", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateSignalExternalTasks indicates an expected call of GenerateSignalExternalTasks.
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateSignalExternalTasks(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSignalExternalTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateSignalExternalTasks), event)
}

// GenerateUserTimerTasks mocks base method.
func (m *MockMutableStateTaskGenerator) GenerateUserTimerTasks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUserTimerTasks")
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateUserTimerTasks indicates an expected call of GenerateUserTimerTasks.
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateUserTimerTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUserTimerTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateUserTimerTasks))
}

// GenerateWorkflowCloseTasks mocks base method.
func (m *MockMutableStateTaskGenerator) GenerateWorkflowCloseTasks(closeEvent *types.HistoryEvent, workflowDeletionTaskJitterRange int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateWorkflowCloseTasks", closeEvent, workflowDeletionTaskJitterRange)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateWorkflowCloseTasks indicates an expected call of GenerateWorkflowCloseTasks.
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateWorkflowCloseTasks(closeEvent, workflowDeletionTaskJitterRange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateWorkflowCloseTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateWorkflowCloseTasks), closeEvent, workflowDeletionTaskJitterRange)
}

// GenerateWorkflowResetTasks mocks base method.
func (m *MockMutableStateTaskGenerator) GenerateWorkflowResetTasks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateWorkflowResetTasks")
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateWorkflowResetTasks indicates an expected call of GenerateWorkflowResetTasks.
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateWorkflowResetTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateWorkflowResetTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateWorkflowResetTasks))
}

// GenerateWorkflowSearchAttrTasks mocks base method.
func (m *MockMutableStateTaskGenerator) GenerateWorkflowSearchAttrTasks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateWorkflowSearchAttrTasks")
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateWorkflowSearchAttrTasks indicates an expected call of GenerateWorkflowSearchAttrTasks.
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateWorkflowSearchAttrTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateWorkflowSearchAttrTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateWorkflowSearchAttrTasks))
}

// GenerateWorkflowStartTasks mocks base method.
func (m *MockMutableStateTaskGenerator) GenerateWorkflowStartTasks(startTime time.Time, startEvent *types.HistoryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateWorkflowStartTasks", startTime, startEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateWorkflowStartTasks indicates an expected call of GenerateWorkflowStartTasks.
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateWorkflowStartTasks(startTime, startEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateWorkflowStartTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateWorkflowStartTasks), startTime, startEvent)
}
