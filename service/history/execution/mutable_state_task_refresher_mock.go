// Code generated by MockGen. DO NOT EDIT.
// Source: mutable_state_task_refresher.go
//
// Generated by this command:
//
//	mockgen -package execution -source mutable_state_task_refresher.go -destination mutable_state_task_refresher_mock.go -self_package github.com/uber/cadence/service/history/execution
//

// Package execution is a generated GoMock package.
package execution

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockMutableStateTaskRefresher is a mock of MutableStateTaskRefresher interface.
type MockMutableStateTaskRefresher struct {
	ctrl     *gomock.Controller
	recorder *MockMutableStateTaskRefresherMockRecorder
	isgomock struct{}
}

// MockMutableStateTaskRefresherMockRecorder is the mock recorder for MockMutableStateTaskRefresher.
type MockMutableStateTaskRefresherMockRecorder struct {
	mock *MockMutableStateTaskRefresher
}

// NewMockMutableStateTaskRefresher creates a new mock instance.
func NewMockMutableStateTaskRefresher(ctrl *gomock.Controller) *MockMutableStateTaskRefresher {
	mock := &MockMutableStateTaskRefresher{ctrl: ctrl}
	mock.recorder = &MockMutableStateTaskRefresherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutableStateTaskRefresher) EXPECT() *MockMutableStateTaskRefresherMockRecorder {
	return m.recorder
}

// RefreshTasks mocks base method.
func (m *MockMutableStateTaskRefresher) RefreshTasks(ctx context.Context, startTime time.Time, mutableState MutableState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTasks", ctx, startTime, mutableState)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshTasks indicates an expected call of RefreshTasks.
func (mr *MockMutableStateTaskRefresherMockRecorder) RefreshTasks(ctx, startTime, mutableState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTasks", reflect.TypeOf((*MockMutableStateTaskRefresher)(nil).RefreshTasks), ctx, startTime, mutableState)
}
