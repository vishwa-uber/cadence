package thrift

// Code generated by gowrap. DO NOT EDIT.
// template: ../../../templates/thrift.tmpl
// gowrap: http://github.com/hexdigest/gowrap

import (
	"context"

	"github.com/uber/cadence/.gen/go/matching"
	"github.com/uber/cadence/.gen/go/shared"
	"github.com/uber/cadence/common/types/mapper/thrift"
)

func (g ThriftHandler) AddActivityTask(ctx context.Context, AddRequest *matching.AddActivityTaskRequest) (err error) {
	_, err = g.h.AddActivityTask(ctx, thrift.ToMatchingAddActivityTaskRequest(AddRequest))
	return thrift.FromError(err)
}

func (g ThriftHandler) AddDecisionTask(ctx context.Context, AddRequest *matching.AddDecisionTaskRequest) (err error) {
	_, err = g.h.AddDecisionTask(ctx, thrift.ToMatchingAddDecisionTaskRequest(AddRequest))
	return thrift.FromError(err)
}

func (g ThriftHandler) CancelOutstandingPoll(ctx context.Context, Request *matching.CancelOutstandingPollRequest) (err error) {
	err = g.h.CancelOutstandingPoll(ctx, thrift.ToMatchingCancelOutstandingPollRequest(Request))
	return thrift.FromError(err)
}

func (g ThriftHandler) DescribeTaskList(ctx context.Context, Request *matching.DescribeTaskListRequest) (dp1 *shared.DescribeTaskListResponse, err error) {
	response, err := g.h.DescribeTaskList(ctx, thrift.ToMatchingDescribeTaskListRequest(Request))
	return thrift.FromMatchingDescribeTaskListResponse(response), thrift.FromError(err)
}

func (g ThriftHandler) GetTaskListsByDomain(ctx context.Context, Request *shared.GetTaskListsByDomainRequest) (gp1 *shared.GetTaskListsByDomainResponse, err error) {
	response, err := g.h.GetTaskListsByDomain(ctx, thrift.ToMatchingGetTaskListsByDomainRequest(Request))
	return thrift.FromMatchingGetTaskListsByDomainResponse(response), thrift.FromError(err)
}

func (g ThriftHandler) ListTaskListPartitions(ctx context.Context, Request *matching.ListTaskListPartitionsRequest) (lp1 *shared.ListTaskListPartitionsResponse, err error) {
	response, err := g.h.ListTaskListPartitions(ctx, thrift.ToMatchingListTaskListPartitionsRequest(Request))
	return thrift.FromMatchingListTaskListPartitionsResponse(response), thrift.FromError(err)
}

func (g ThriftHandler) PollForActivityTask(ctx context.Context, PollRequest *matching.PollForActivityTaskRequest) (pp1 *shared.PollForActivityTaskResponse, err error) {
	response, err := g.h.PollForActivityTask(ctx, thrift.ToMatchingPollForActivityTaskRequest(PollRequest))
	return thrift.FromMatchingPollForActivityTaskResponse(response), thrift.FromError(err)
}

func (g ThriftHandler) PollForDecisionTask(ctx context.Context, PollRequest *matching.PollForDecisionTaskRequest) (pp1 *matching.PollForDecisionTaskResponse, err error) {
	response, err := g.h.PollForDecisionTask(ctx, thrift.ToMatchingPollForDecisionTaskRequest(PollRequest))
	return thrift.FromMatchingPollForDecisionTaskResponse(response), thrift.FromError(err)
}

func (g ThriftHandler) QueryWorkflow(ctx context.Context, QueryRequest *matching.QueryWorkflowRequest) (qp1 *shared.QueryWorkflowResponse, err error) {
	response, err := g.h.QueryWorkflow(ctx, thrift.ToMatchingQueryWorkflowRequest(QueryRequest))
	return thrift.FromMatchingQueryWorkflowResponse(response), thrift.FromError(err)
}

func (g ThriftHandler) RespondQueryTaskCompleted(ctx context.Context, Request *matching.RespondQueryTaskCompletedRequest) (err error) {
	err = g.h.RespondQueryTaskCompleted(ctx, thrift.ToMatchingRespondQueryTaskCompletedRequest(Request))
	return thrift.FromError(err)
}
