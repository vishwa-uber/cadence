// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source types.go -destination schema_client_mock.go -package schema github.com/uber/cadence/tools/common/schema SchemaClient
//

// Package schema is a generated GoMock package.
package schema

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSchemaClient is a mock of SchemaClient interface.
type MockSchemaClient struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaClientMockRecorder
	isgomock struct{}
}

// MockSchemaClientMockRecorder is the mock recorder for MockSchemaClient.
type MockSchemaClientMockRecorder struct {
	mock *MockSchemaClient
}

// NewMockSchemaClient creates a new mock instance.
func NewMockSchemaClient(ctrl *gomock.Controller) *MockSchemaClient {
	mock := &MockSchemaClient{ctrl: ctrl}
	mock.recorder = &MockSchemaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemaClient) EXPECT() *MockSchemaClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSchemaClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSchemaClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSchemaClient)(nil).Close))
}

// CreateSchemaVersionTables mocks base method.
func (m *MockSchemaClient) CreateSchemaVersionTables() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchemaVersionTables")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSchemaVersionTables indicates an expected call of CreateSchemaVersionTables.
func (mr *MockSchemaClientMockRecorder) CreateSchemaVersionTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaVersionTables", reflect.TypeOf((*MockSchemaClient)(nil).CreateSchemaVersionTables))
}

// DropAllTables mocks base method.
func (m *MockSchemaClient) DropAllTables() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropAllTables")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropAllTables indicates an expected call of DropAllTables.
func (mr *MockSchemaClientMockRecorder) DropAllTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropAllTables", reflect.TypeOf((*MockSchemaClient)(nil).DropAllTables))
}

// ExecDDLQuery mocks base method.
func (m *MockSchemaClient) ExecDDLQuery(stmt string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{stmt}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecDDLQuery", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecDDLQuery indicates an expected call of ExecDDLQuery.
func (mr *MockSchemaClientMockRecorder) ExecDDLQuery(stmt any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{stmt}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecDDLQuery", reflect.TypeOf((*MockSchemaClient)(nil).ExecDDLQuery), varargs...)
}

// ReadSchemaVersion mocks base method.
func (m *MockSchemaClient) ReadSchemaVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSchemaVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSchemaVersion indicates an expected call of ReadSchemaVersion.
func (mr *MockSchemaClientMockRecorder) ReadSchemaVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSchemaVersion", reflect.TypeOf((*MockSchemaClient)(nil).ReadSchemaVersion))
}

// UpdateSchemaVersion mocks base method.
func (m *MockSchemaClient) UpdateSchemaVersion(newVersion, minCompatibleVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchemaVersion", newVersion, minCompatibleVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchemaVersion indicates an expected call of UpdateSchemaVersion.
func (mr *MockSchemaClientMockRecorder) UpdateSchemaVersion(newVersion, minCompatibleVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchemaVersion", reflect.TypeOf((*MockSchemaClient)(nil).UpdateSchemaVersion), newVersion, minCompatibleVersion)
}

// WriteSchemaUpdateLog mocks base method.
func (m *MockSchemaClient) WriteSchemaUpdateLog(oldVersion, newVersion, manifestMD5, desc string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSchemaUpdateLog", oldVersion, newVersion, manifestMD5, desc)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSchemaUpdateLog indicates an expected call of WriteSchemaUpdateLog.
func (mr *MockSchemaClientMockRecorder) WriteSchemaUpdateLog(oldVersion, newVersion, manifestMD5, desc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSchemaUpdateLog", reflect.TypeOf((*MockSchemaClient)(nil).WriteSchemaUpdateLog), oldVersion, newVersion, manifestMD5, desc)
}
