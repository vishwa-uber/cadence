services:
  cassandra:
    image: cassandra:4.1.1
    environment:
      - "MAX_HEAP_SIZE=256M"
      - "HEAP_NEWSIZE=128M"
    expose:
      - "9042"
    networks:
      services-network:
        aliases:
          - cassandra
    healthcheck:
      test: ["CMD", "cqlsh", "-u cassandra", "-p cassandra" ,"-e describe keyspaces"]
      interval: 15s
      timeout: 30s
      retries: 10

  prometheus:
    image: prom/prometheus:v3.0.1
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/replication_simulation_prometheus.yml'
    ports:
      - '9090:9090'
    networks:
      services-network:
        aliases:
          - prometheus

  grafana:
    image: grafana/grafana:11.4.0
    volumes:
      - ./grafana:/etc/grafana
    user: "1000"
    depends_on:
      - prometheus
    ports:
      - '3000:3000'
    networks:
      services-network:
        aliases:
          - grafana

  cadence-cluster0:
    build:
      context: ../../
      dockerfile: ./Dockerfile
      args:
        TARGET: auto-setup
    command:
      - /start.sh
    ports:
      - "7933:7933" # frontend thrift
      - "7833:7833" # frontend grpc
      - "7934:7934" # history thrift
      - "7834:7834" # history grpc
      - "7935:7935" # matching thrift
      - "7835:7835" # matching grpc
      - "7939:7939" # worker thrift
      - "7000:7000" # frontend prometheus
      - "7001:7001" # matching prometheus
      - "7002:7002" # history prometheus
      - "7003:7003" # worker prometheus
    environment:
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/replication_simulation_${SCENARIO}.yml
      - "CLUSTER_REDIRECT_POLICY=selected-apis-forwarding"
      - "BIND_ON_IP=0.0.0.0"
      - "PRIMARY_FRONTEND_SERVICE=cadence-cluster0"
      - "SECONDARY_FRONTEND_SERVICE=cadence-cluster1"
      - "CASSANDRA_SEEDS=cassandra"
      - "ENABLE_GLOBAL_DOMAIN=true"
      - "ENABLE_GLOBAL_ACTIVE_ACTIVE_DOMAIN=true"
      - "KEYSPACE=cadence_primary"
      - "VISIBILITY_KEYSPACE=cadence_visibility_primary"
      - "LOG_LEVEL=debug"
      - "MATCHING_LOG_EVENTS=true"
      - "PROMETHEUS_ENDPOINT_0=0.0.0.0:7000" # frontend scrape endpoint
      - "PROMETHEUS_ENDPOINT_1=0.0.0.0:7001" # matching scrape endpoint
      - "PROMETHEUS_ENDPOINT_2=0.0.0.0:7002" # history scrape endpoint
      - "PROMETHEUS_ENDPOINT_3=0.0.0.0:7003" # worker scrape endpoint
    depends_on:
      cassandra:
        condition: service_healthy
      prometheus:
        condition: service_started
    networks:
      services-network:
        aliases:
          - cadence-cluster0

  cadence-cluster1:
    build:
      context: ../../
      dockerfile: ./Dockerfile
      args:
        TARGET: auto-setup
    command:
      - /start.sh
    ports: # cluster1 uses 8xxx host ports to avoid conflicts with cluster0
      - "8933:7933" # frontend thrift
      - "8833:7833" # frontend grpc
      - "8934:7934" # history thrift
      - "8834:7834" # history grpc
      - "8935:7935" # matching thrift
      - "8835:7835" # matching grpc
      - "8939:7939" # worker thrift
      - "8000:8000" # frontend prometheus
      - "8001:8001" # matching prometheus
      - "8002:8002" # history prometheus
      - "8003:8003" # worker prometheus
    environment:
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/replication_simulation_${SCENARIO}.yml
      - "CLUSTER_REDIRECT_POLICY=selected-apis-forwarding"
      - "BIND_ON_IP=0.0.0.0"
      - "PRIMARY_FRONTEND_SERVICE=cadence-cluster0"
      - "SECONDARY_FRONTEND_SERVICE=cadence-cluster1"
      - "CASSANDRA_SEEDS=cassandra"
      - "IS_NOT_PRIMARY=true"
      - "ENABLE_GLOBAL_DOMAIN=true"
      - "ENABLE_GLOBAL_ACTIVE_ACTIVE_DOMAIN=true"
      - "KEYSPACE=cadence_secondary"
      - "VISIBILITY_KEYSPACE=cadence_visibility_secondary"
      - "LOG_LEVEL=debug"
      - "MATCHING_LOG_EVENTS=true"
      - "PROMETHEUS_ENDPOINT_0=0.0.0.0:8000" # frontend scrape endpoint
      - "PROMETHEUS_ENDPOINT_1=0.0.0.0:8001" # matching scrape endpoint
      - "PROMETHEUS_ENDPOINT_2=0.0.0.0:8002" # history scrape endpoint
      - "PROMETHEUS_ENDPOINT_3=0.0.0.0:8003" # worker scrape endpoint
    depends_on:
      cassandra:
        condition: service_healthy
      prometheus:
        condition: service_started
    networks:
      services-network:
        aliases:
          - cadence-cluster1

  cadence-web:
    image: ubercadence/web:latest
    environment:
      - "CADENCE_GRPC_PEERS=cadence-cluster0:7833,cadence-cluster1:7833"
      - "CADENCE_GRPC_SERVICES_NAMES=cadence-frontend,cadence-frontend"
      - "CADENCE_CLUSTERS_NAMES=cluster0,cluster1"
    ports:
      - "8088:8088"
    depends_on:
      - cadence-cluster0
      - cadence-cluster1
    networks:
      services-network:
        aliases:
          - cadence-web

  cadence-worker0:
    build:
      context: ../../
      dockerfile: ./docker/buildkite/Dockerfile
    working_dir: /cadence/simulation/replication/worker/cmd
    command:
      - /bin/sh
      - -e
      - -c
      - >
        go run *.go --cluster cluster0 | tee worker0.log
    environment:
      - REPLICATION_SIMULATION_CONFIG=testdata/replication_simulation_${SCENARIO}.yaml
    depends_on:
      cadence-cluster0:
        condition: service_started
      cadence-cluster1:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6060/health"]
      interval: 10s
      timeout: 2s
      retries: 20
    volumes:
      - ../../:/cadence
      - /cadence/.build/ # ensure we don't mount the build directory
      - /cadence/.bin/ # ensure we don't mount the bin directory
      - ../../simulation/replication/testdata/:/cadence/simulation/replication/worker/cmd/testdata/
    networks:
      services-network:
        aliases:
          - cadence-worker0

  cadence-worker1:
    build:
      context: ../../
      dockerfile: ./docker/buildkite/Dockerfile
    working_dir: /cadence/simulation/replication/worker/cmd
    command:
      - /bin/sh
      - -e
      - -c
      - >
        go run *.go --cluster cluster1 | tee worker1.log
    environment:
      - REPLICATION_SIMULATION_CONFIG=testdata/replication_simulation_${SCENARIO}.yaml
    depends_on:
      cadence-cluster0:
        condition: service_started
      cadence-cluster1:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6060/health"]
      interval: 10s
      timeout: 2s
      retries: 20
    volumes:
      - ../../:/cadence
      - /cadence/.build/ # ensure we don't mount the build directory
      - /cadence/.bin/ # ensure we don't mount the bin directory
      - ../../simulation/replication/testdata/:/cadence/simulation/replication/worker/cmd/testdata/
    networks:
      services-network:
        aliases:
          - cadence-worker1

  replication-simulator:
    build:
      context: ../../
      dockerfile: ./docker/buildkite/Dockerfile
    command:
      - /bin/sh
      - -e
      - -c
      - >
        go test -timeout 180s
        -run ^TestReplicationSimulation.*$
        -count 1
        -v
        github.com/uber/cadence/simulation/replication
        | tee test.log
    depends_on:
      cadence-cluster0:
        condition: service_started
      cadence-worker0:
        condition: service_started
      cadence-cluster1:
        condition: service_started
      cadence-worker1:
        condition: service_started
      cadence-web:
        condition: service_started
      grafana:
        condition: service_started
    ports: # expose prometheus ports so they can be scraped
      - '8306:8306'
      - '8307:8307'
      - '8308:8308'
      - '8309:8309'
    volumes:
      - ../../:/cadence
      - /cadence/.build/ # ensure we don't mount the build directory
      - /cadence/.bin/ # ensure we don't mount the bin directory
    networks:
      services-network:
        aliases:
          - replication-simulator

networks:
  services-network:
    name: services-network
    driver: bridge
